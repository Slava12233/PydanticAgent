# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.


# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. 
- When integrating Logfire with httpx, you need to install the additional package `logfire[httpx]` to enable HTTP request monitoring.
- Always call `logfire.configure()` before using any other Logfire functions.
- Use `logfire.span()` for tracking longer operations and `logfire.info()`, `logfire.error()` for specific events.
- Remember to add proper cleanup with `logfire.force_flush()` and `logfire.shutdown()` to ensure all logs are sent.
- For multilingual documentation, include both Hebrew and English versions in the README.md file to make the project accessible to a wider audience.
- Maintain a modular architecture by separating concerns into different files (e.g., agent.py for AI logic, main.py for bot interface).
- When configuring timeouts in python-telegram-bot, use the defaults parameter in Application.builder() instead of trying to modify the _request.timeout attribute directly. The timeout is a tuple, not a single value.
- In python-telegram-bot v21.10, use a single 'timeout' key in the defaults dictionary instead of separate timeout types like 'connect_timeout', 'read_timeout', etc.
- In python-telegram-bot v21.10, use the Defaults class instead of a dictionary for the defaults parameter, and make sure to include tzinfo (e.g., datetime.timezone.utc).
- In python-telegram-bot v21.10, the Defaults class does not accept any timeout parameters. Timeouts must be configured elsewhere, not in the Defaults object.
- In python-telegram-bot v21.10, use the ApplicationBuilder methods (read_timeout, write_timeout, connect_timeout, pool_timeout) to set timeout values instead of trying to set them in the Defaults object.
- When migrating from SQLite to PostgreSQL, use SQLAlchemy as an ORM to make the transition smoother and maintain a consistent API.
- For PostgreSQL connections, install both `psycopg2-binary` and `sqlalchemy` packages.
- Use environment variables to store database connection details (host, port, database name, username, password) for better security and flexibility.
- When working with SQLAlchemy, define models that inherit from `declarative_base()` to create database tables.
- In SQLAlchemy, use `sessionmaker` to create database sessions for interacting with the database.
- Remember to call `db.init_db()` before using the database to ensure tables are created and the connection is established.
- When accessing an object's attributes after a database session is closed, you'll get a DetachedInstanceError. Save any needed values before closing the session.
- After migrating from SQLite to PostgreSQL, make sure to remove all references to the old database file and code to avoid confusion.
- When implementing a RAG system, create a separate module for document management to keep the code organized.
- For RAG systems, use a database model that can store document chunks with metadata for efficient retrieval.
- Implement a command-line interface for document management to allow for easy testing and administration.
- When adding documents to a RAG system, split them into smaller chunks for more precise retrieval.
- Include proper error handling in document management functions to prevent crashes when dealing with file operations.
- Make sure to update the README.md with detailed instructions on how to use the RAG system, both via the bot and command line.
- When using SQLAlchemy, always use text() for raw SQL queries to avoid the "Textual SQL expression should be explicitly declared as text()" error.
- When using pgvector in PostgreSQL, make sure the extension is installed in the database. If not, use ARRAY(Float) as a temporary alternative for storing embeddings.
- When testing database functionality, verify that the tables exist and have the correct structure before running more complex tests. This helps identify schema issues early.
- For Telegram user IDs, use BigInteger instead of Integer in SQLAlchemy models, as Telegram IDs can be very large numbers that exceed the range of a standard 32-bit integer.
- When implementing search functionality in a RAG system, set a min_similarity parameter (e.g., 0.0) to ensure results are returned even when the similarity score is low.
- Provide clear and detailed feedback to users when they interact with document management features, including emojis and formatting for better readability.
- Validate user input for document titles and content to prevent issues with empty or oversized files.
- Include comprehensive error handling for file operations, especially when dealing with different encodings and file formats.
- When displaying search results, convert similarity scores to percentages for better user understanding (e.g., 0.75 â†’ 75%).
- Use Markdown formatting in Telegram messages to improve readability and highlight important information.
- When importing the datetime module, make sure to import the specific classes you need (e.g., `from datetime import datetime, timezone`) rather than importing the entire module (e.g., `import datetime`). This avoids errors like `datetime.utcnow()` vs `datetime.datetime.utcnow()`.
- When using timezone information with datetime, remember to import the timezone class explicitly: `from datetime import timezone`.
- When implementing error handling in AI agents, categorize errors by type (quota, timeout, content filter) for more specific user feedback.
- For quota errors with OpenAI API, implement a fallback mechanism to switch to alternative models automatically.
- When working with multiple model providers (OpenAI, Anthropic), use a prefix convention (e.g., 'openai:', 'anthropic:') to clearly identify the provider.
- Add user commands to switch between models (/switch_model) and set fallback models (/set_fallback) for better user control.
- Implement a /help command that lists all available commands with descriptions for better user experience.
- Add a /models command to show users which models are currently active (primary and fallback).
- When handling API errors, provide specific, helpful messages that guide users on what actions they can take.
- For timeout errors, suggest that users break down complex questions into smaller parts.
- For content filter errors, explain that the question violates content policies and suggest rephrasing.
- Use try-except blocks with specific exception types rather than catching all exceptions generically when possible.
- Log different error types with appropriate severity levels (warning for quota issues, error for other failures).

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- The project uses Pydantic AI as the main framework for AI integration, which provides a clean interface for working with LLMs
- The Telegram bot is implemented using python-telegram-bot library and supports Hebrew language
- PostgreSQL is used for storing chat history with SQLAlchemy as the ORM
- Logfire provides comprehensive monitoring for AI applications, tracking HTTP requests, database operations, and model interactions
- When working with Telegram bots, increase timeout values to prevent "Timed out" errors during API calls
- Use a modular architecture with separate files for bot logic, agent implementation, and main application flow
- For RAG systems, create a dedicated tools directory to house utility functions like document management
- When implementing a RAG system, update the configuration file to include new commands for document operations
- Store document chunks in the database with metadata to enable efficient retrieval during conversations
- Implement both bot commands and command-line interfaces for document management to provide flexibility

# Scratchpad

## Project Overview
- AI Agent connected to a Telegram bot
- Uses Pydantic AI as the main framework
- Supports Hebrew language
- Stores chat history in PostgreSQL database
- Uses OpenAI's GPT-4 model
- Includes RAG system for enhanced responses based on custom documents

## Project Structure
- `run.py` - Entry point for running the bot
- `src/main.py` - Main application flow
- `src/bots/telegram_bot.py` - Telegram bot implementation
- `src/agents/telegram_agent.py` - AI agent implementation and prompt handling
- `src/database/database.py` - PostgreSQL database operations
- `src/database/models.py` - Database models for messages and documents
- `src/database/rag_utils.py` - RAG utility functions
- `src/tools/document_manager.py` - Document management for RAG
- `src/core/config.py` - Configuration settings
- `.env` - Environment variables (API keys, database credentials)
- `GitResurces/` - Contains external Git libraries including pydantic-ai
- `.gitignore` - Defines files and directories to be ignored by Git
- `README.md` - Project documentation in Hebrew and English

## Recent Tasks

### Logfire Integration
[X] Understand Logfire's purpose and functionality
[X] Check existing installation and configuration
[X] Install required packages (`logfire[httpx]`)
[X] Add Logfire configuration to main.py
[X] Add monitoring for Telegram bot commands
[X] Add monitoring for message handling
[X] Add monitoring for database operations
[X] Add proper cleanup and shutdown
[X] Test the integration
[X] Update documentation (.cursorrules)

### Git Configuration
[X] Create .gitignore file
[X] Include Python-specific patterns
[X] Include project-specific patterns (database files, environment variables, Logfire)
[X] Update documentation (.cursorrules)
[X] Initialize Git repository
[X] Add remote repository
[X] Commit and push initial files

### Project Documentation
[X] Create README.md file
[X] Add Hebrew documentation
[X] Add English documentation
[X] Include installation instructions
[X] Include usage instructions
[X] Document project structure
[X] Document available commands
[X] Commit and push README.md

### Code Refactoring
[X] Create agent.py file for AI logic
[X] Move Agent initialization and prompt handling to agent.py
[X] Add TelegramAgent class with get_response and stream_response methods
[X] Update main.py to use the new TelegramAgent class
[X] Update README.md to reflect the new architecture
[X] Update .cursorrules with the changes

### Fixing Timeout Issues and Improving Architecture
[X] Create a dedicated bots directory for bot implementations
[X] Create telegram_bot.py with improved timeout handling
[X] Update main.py to use the new modular structure
[X] Update run.py with better error handling
[X] Increase timeout values for Telegram API calls
[X] Add retry logic for API calls
[X] Update documentation (.cursorrules)

### PostgreSQL Migration
[X] Install required packages (psycopg2-binary, sqlalchemy)
[X] Create database directory structure
[X] Create database.py with SQLAlchemy models and operations
[X] Update config.py with PostgreSQL connection settings
[X] Update .env with PostgreSQL credentials
[X] Update main.py to use the new database module
[X] Update telegram_bot.py to use the new database module
[X] Update telegram_agent.py to handle the new history format
[X] Update .gitignore to include PostgreSQL-specific files
[X] Update README.md with PostgreSQL information
[X] Update requirements.txt with new dependencies
[X] Update .cursorrules with lessons learned

### Cleanup and Finalization
[X] Remove old SQLite database file (chat_history.db)
[X] Remove old services directory with SQLite code
[X] Update config.py to remove references to SQLite
[X] Test the application with PostgreSQL only
[X] Update documentation (.cursorrules)
[X] Update README.md to reflect the changes
[X] Commit and push all changes to Git

### RAG System Implementation
[X] Create database models for documents and chunks
[X] Implement RAG utility functions
[X] Create document manager tool
[X] Update configuration with new commands
[X] Update TelegramAgent to support RAG
[X] Update telegram_bot.py with document management commands
[X] Update README.md with RAG system documentation
[X] Update .cursorrules with lessons learned

### Fixing Telegram User ID Issue and Improving RAG
[X] Identify the issue with Telegram user IDs being too large for Integer field
[X] Update models.py to use BigInteger for user IDs
[X] Recreate database tables with the new schema
[X] Improve the RAG search functionality with min_similarity parameter
[X] Enhance the prompt in telegram_agent.py for better handling of personal information
[X] Improve user feedback in document management commands
[X] Add better error handling for file operations
[X] Update .cursorrules with lessons learned

### Database and RAG Testing Plan
[X] Create comprehensive test script for database functionality
[X] Test user and conversation management
[X] Test message storage and retrieval
[X] Test RAG document management
[X] Test RAG search functionality
[X] Test integration with the Telegram agent
[X] Document test results and fix any issues

#### 1. Database Connection Testing
[X] Test connection to PostgreSQL database
[X] Verify all tables are created correctly
[X] Test connection pooling and timeout handling
[X] Test error handling for connection issues

#### 2. User and Conversation Management Testing
[X] Test user creation and retrieval
[X] Test conversation creation and management
[X] Test active conversation switching
[X] Test conversation history clearing

#### 3. Message Storage and Retrieval Testing
[X] Test saving user and assistant messages
[X] Test retrieving chat history
[X] Test message formatting for agent context
[X] Test message count and statistics

#### 4. RAG Document Management Testing
[X] Test document addition from file
[X] Test document addition from direct content
[X] Test document chunking functionality
[X] Test document metadata storage
[X] Test document listing functionality
[X] Test document deletion

#### 5. RAG Search Testing
[X] Test embedding creation
[X] Test vector similarity search
[X] Test search result ranking
[X] Test search result formatting
[X] Test search performance with multiple documents

#### 6. Agent Integration Testing
[X] Test RAG integration with agent responses
[X] Test context enhancement with RAG results
[X] Test streaming responses with RAG
[X] Test error handling in RAG-enhanced responses

#### 7. Telegram Bot Command Testing
[X] Test /add_document command flow
[X] Test /search_documents command flow
[X] Test document upload and processing
[X] Test conversation state management during document operations

### Multi-Model Support and Error Handling
[X] Add support for Anthropic Claude models
[X] Implement model provider prefix system (openai:, anthropic:)
[X] Update agent initialization to handle different model providers
[X] Add /switch_model command to change primary model
[X] Add /set_fallback command to set backup model
[X] Add /models command to display current models in use
[X] Enhance error handling with specific error types (quota, timeout, content filter)
[X] Improve error messages with helpful suggestions for users
[X] Update help command to include new model-related commands
[X] Test fallback mechanism with quota errors
[X] Update documentation in .cursorrules

### Next Steps
- Consider adding database indexes for performance optimization
- Add support for more model providers (e.g., Mistral, Llama)
- Implement user preferences for default models
- Add usage tracking for different models
- Consider implementing a rate limiting system to prevent quota errors

### Admin Dashboard Development
[ ] Design admin dashboard architecture
[ ] Create admin command handlers in telegram_bot.py
[ ] Implement user management features (list, block, unblock users)
[ ] Add system statistics and monitoring features
[ ] Implement document management for admins
[ ] Add model usage analytics
[ ] Add configuration management through admin commands
[ ] Implement access control and permissions
[ ] Add admin notification system
[ ] Create comprehensive admin help documentation

### WooCommerce Dashboard Development
[X] Create database models for WooCommerce integration (store, products, orders, customers)
[X] Implement store connection process with API key authentication
[X] Create basic dashboard UI with inline keyboard buttons
[X] Add store statistics display functionality
[X] Implement order management features
[X] Add product management capabilities
[X] Create customer management interface
[X] Implement store settings and configuration
[X] Organize project structure for WooCommerce integration
[X] Update documentation with WooCommerce features

## Project Organization Lessons

- Keep database tools in a dedicated directory (tests/db_tools) for better organization
- Use a single .env file for all configuration settings including Logfire
- Avoid duplicate directories in the project structure
- Remove unnecessary files like install_dependencies.py when using manual installation
- Make sure README files are updated when project structure changes
- When moving files, update all references to them in other files
- Use consistent naming conventions for files and directories